```python
# The task is to have the robot lift the cube. This task involves two stages:
# 1. Grasp the cube.
# 2. Lift the cube.

num_stages = 2

### stage 1 sub-goal constraints (grasp the cube)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the top keypoint (keypoint 1) of the cube."""
    return np.linalg.norm(end_effector - keypoints[1])

### stage 1 path constraints (none for grasping stage)
# No path constraints are needed for the grasping stage.

### stage 2 sub-goal constraints (lift the cube)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The cube's top keypoint (keypoint 1) should be 10 cm above its initial position."""
    offsetted_point = keypoints[1] + np.array([0, 0, 0.1])  # 10 cm above the initial position
    return np.linalg.norm(keypoints[1] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the cube (keypoint 1)."""
    return get_grasping_cost_by_keypoint_idx(1)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [1, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, -1]
```