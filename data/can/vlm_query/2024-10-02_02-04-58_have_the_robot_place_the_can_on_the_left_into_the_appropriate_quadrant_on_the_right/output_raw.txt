```python
# The task involves placing the can on the left into the appropriate quadrant on the right.
# The can has two keypoints (1 and 2), and the quadrants on the right are marked with keypoints 3-10.
# The task can be broken down into 3 stages:
# 1. Grasp the can.
# 2. Move the can to the appropriate quadrant.
# 3. Drop the can into the quadrant.

num_stages = 3

### stage 1 sub-goal constraints (grasp the can)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the can's keypoint 1."""
    can_keypoint = keypoints[1]
    cost = np.linalg.norm(end_effector - can_keypoint)
    return cost

### stage 1 path constraints (none for grasping stage)
# No path constraints needed for this stage.

### stage 2 sub-goal constraints (move the can to the appropriate quadrant)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Move the can to be 10cm above the center of the target quadrant (keypoint 9)."""
    target_quadrant_keypoint = keypoints[9]
    offsetted_point = target_quadrant_keypoint + np.array([0, 0, 0.1])  # 10cm above the quadrant
    cost = np.linalg.norm(keypoints[1] - offsetted_point)  # Can's keypoint 1 should be above the quadrant
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the can (keypoint 1)."""
    return get_grasping_cost_by_keypoint_idx(1)

### stage 3 sub-goal constraints (drop the can into the quadrant)
def stage3_subgoal_constraint1(end_effector, keypoints):
    """The can's keypoint 1 should be 2cm above the target quadrant (keypoint 9)."""
    target_quadrant_keypoint = keypoints[9]
    offsetted_point = target_quadrant_keypoint + np.array([0, 0, 0.02])  # 2cm above the quadrant
    cost = np.linalg.norm(keypoints[1] - offsetted_point)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the can (keypoint 1)."""
    return get_grasping_cost_by_keypoint_idx(1)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [1, -1, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, -1, 1]

```